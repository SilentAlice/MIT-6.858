!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGV	shellcode.S	/^#define ARGV	(STRLEN+1)$/;"	d
ASFLAGS	Makefile	/^ASFLAGS := -m32$/;"	m
CFLAGS	Makefile	/^CFLAGS  := -m32 -g -std=c99 -Wall -Werror -D_GNU_SOURCE$/;"	m
ENVP	shellcode.S	/^#define ENVP	(ARGV+4)$/;"	d
Head	check-bugs.py	/^Head = collections.namedtuple("Head", "file line")$/;"	v
KEY_FILE	submit.py	/^KEY_FILE = "submit.token"$/;"	v
LDFLAGS	Makefile	/^LDFLAGS := -m32$/;"	m
LDLIBS	Makefile	/^LDLIBS  := -lcrypto$/;"	m
MAX_GIDS	zookld.c	19;"	d	file:
MAX_SERVICES	zookd.c	12;"	d	file:
MAX_SERVICES	zookld.c	18;"	d	file:
PATH	Makefile	/^      PATH := $(PATH):\/usr\/sbin$/;"	m
PROGS	Makefile	/^PROGS   := zookld zookfs zookd \\$/;"	m
Person	zoobar/zoodb.py	/^class Person(PersonBase):$/;"	c	inherits:PersonBase
PersonBase	zoobar/zoodb.py	/^PersonBase = declarative_base()$/;"	v
STRING	shellcode.S	/^#define STRING	"\/bin\/sh"$/;"	d
STRLEN	shellcode.S	/^#define STRLEN	7$/;"	d
Transfer	zoobar/zoodb.py	/^class Transfer(TransferBase):$/;"	c	inherits:TransferBase
TransferBase	zoobar/zoodb.py	/^TransferBase = declarative_base()$/;"	v
User	zoobar/login.py	/^class User(object):$/;"	c	inherits:object
ZOOK_CONF	zookld.c	17;"	d	file:
__init__	zoobar/login.py	/^    def __init__(self):$/;"	m	class:User	access:public
__tablename__	zoobar/zoodb.py	/^    __tablename__ = "person"$/;"	v	class:Person
__tablename__	zoobar/zoodb.py	/^    __tablename__ = "transfer"$/;"	v	class:Transfer
__try	zoobar/debug.py	/^    def __try(*args, **kwargs):$/;"	f	function:catch_err	file:	access:private
addRegistration	zoobar/login.py	/^    def addRegistration(self, username, password):$/;"	m	class:User	access:public
amount	zoobar/zoodb.py	/^    amount = Column(Integer)$/;"	v	class:Transfer
ans	check-bugs.py	/^    ans = parse(sys.argv[1])$/;"	v
app	zoobar/__init__.py	/^app = Flask(__name__)$/;"	v
balance	zoobar/bank.py	/^def balance(username):$/;"	f	access:public
build_exploit	exploit-template.py	/^def build_exploit(shellcode):$/;"	f	access:public
calladdr	shellcode.S	/^ calladdr:$/;"	l
catch_err	zoobar/debug.py	/^def catch_err(f):$/;"	f	access:public
cgi_gid	http.c	/^static int cgi_gid = -1;$/;"	v	file:
cgi_uid	http.c	/^static int cgi_uid = -1;$/;"	v	file:
check	z_client.py	/^def check():$/;"	f	access:public
checkCookie	zoobar/login.py	/^    def checkCookie(self, cookie):$/;"	m	class:User	access:public
checkLogin	zoobar/login.py	/^    def checkLogin(self, username, password):$/;"	m	class:User	access:public
check_ex0	check_zoobar.py	/^def check_ex0():$/;"	f	access:public
check_token	zoobar/auth.py	/^def check_token(username, token):$/;"	f	access:public
check_zoobars	z_client.py	/^def check_zoobars(html, user, zoobars, zmsg):$/;"	f	access:public
cleanup	check-part2.sh	/^cleanup() {$/;"	f
cleanup	check-part3.sh	/^cleanup() {$/;"	f
dbsetup	zoobar/zoodb.py	/^def dbsetup(name, base):$/;"	f	access:public
dir_join	http.c	/^void dir_join(char *dst, const char *dirname, const char *filename) {$/;"	f	signature:(char *dst, const char *dirname, const char *filename)
disable_xss_protection	zoobar/__init__.py	/^def disable_xss_protection(response):$/;"	f	access:public
div	zoobar/templates/zoobars.js	/^var div = document.getElementById("myZoobars");$/;"	v
env_deserialize	http.c	/^void env_deserialize(const char *env, size_t len)$/;"	f	signature:(const char *env, size_t len)
env_deserialize	http.h	/^void env_deserialize(const char *env, size_t len);$/;"	p	signature:(const char *env, size_t len)
fdprintf	http.c	/^void fdprintf(int fd, char *fmt, ...)$/;"	f	signature:(int fd, char *fmt, ...)
fdprintf	http.h	/^void fdprintf(int fd, char *fmt, ...);$/;"	p	signature:(int fd, char *fmt, ...)
file_read	check_zoobar.py	/^def file_read(pn):$/;"	f	access:public
file_read	z_client.py	/^def file_read(pn):$/;"	f	access:public
file_write	z_client.py	/^def file_write(pn, data):$/;"	f	access:public
get	z_client.py	/^def get(url, cookies):$/;"	f	access:public
get_log	zoobar/bank.py	/^def get_log(username):$/;"	f	access:public
gids	zookld.c	/^static gid_t gids[MAX_GIDS];$/;"	v	file:
green	check_zoobar.py	/^def green(s):$/;"	f	access:public
group_parse_cb	zookld.c	/^static int group_parse_cb(const char *, int, void *);$/;"	p	file:	signature:(const char *, int, void *)
group_parse_cb	zookld.c	/^static int group_parse_cb(const char *gid_str, int len, void *arg)$/;"	f	file:	signature:(const char *gid_str, int len, void *arg)
http_err	http.c	/^void http_err(int fd, int code, char *fmt, ...)$/;"	f	signature:(int fd, int code, char *fmt, ...)
http_err	http.h	/^void http_err(int fd, int code, char *fmt, ...);$/;"	p	signature:(int fd, int code, char *fmt, ...)
http_read_line	http.c	/^int http_read_line(int fd, char *buf, size_t size)$/;"	f	signature:(int fd, char *buf, size_t size)
http_request_headers	http.c	/^const char *http_request_headers(int fd)$/;"	f	signature:(int fd)
http_request_headers	http.h	/^const char *http_request_headers(int fd);$/;"	p	signature:(int fd)
http_request_line	http.c	/^const char *http_request_line(int fd, char *reqpath, char *env, size_t *env_len)$/;"	f	signature:(int fd, char *reqpath, char *env, size_t *env_len)
http_request_line	http.h	/^const char *http_request_line(int fd, char *reqpath, char *env, size_t *env_len);$/;"	p	signature:(int fd, char *reqpath, char *env, size_t *env_len)
http_serve	http.c	/^void http_serve(int fd, const char *name)$/;"	f	signature:(int fd, const char *name)
http_serve	http.h	/^void http_serve(int fd, const char *);$/;"	p	signature:(int fd, const char *)
http_serve_directory	http.c	/^void http_serve_directory(int fd, const char *pn) {$/;"	f	signature:(int fd, const char *pn)
http_serve_directory	http.h	/^void http_serve_directory(int fd, const char *);$/;"	p	signature:(int fd, const char *)
http_serve_executable	http.c	/^void http_serve_executable(int fd, const char *pn)$/;"	f	signature:(int fd, const char *pn)
http_serve_executable	http.h	/^void http_serve_executable(int fd, const char *);$/;"	p	signature:(int fd, const char *)
http_serve_file	http.c	/^void http_serve_file(int fd, const char *pn)$/;"	f	signature:(int fd, const char *pn)
http_serve_file	http.h	/^void http_serve_file(int fd, const char *);$/;"	p	signature:(int fd, const char *)
http_serve_none	http.c	/^void http_serve_none(int fd, const char *pn)$/;"	f	signature:(int fd, const char *pn)
http_serve_none	http.h	/^void http_serve_none(int fd, const char *);$/;"	p	signature:(int fd, const char *)
http_set_executable_uid_gid	http.c	/^http_set_executable_uid_gid(int uid, int gid)$/;"	f	signature:(int uid, int gid)
http_set_executable_uid_gid	http.h	/^void http_set_executable_uid_gid(int uid, int gid);$/;"	p	signature:(int uid, int gid)
id	zoobar/zoodb.py	/^    id = Column(Integer, primary_key=True)$/;"	v	class:Transfer
index	zoobar/index.py	/^def index():$/;"	f	access:public
killall	check_zoobar.py	/^def killall():$/;"	f	access:public
launch_svc	zookld.c	/^pid_t launch_svc(CONF *conf, const char *name)$/;"	f	signature:(CONF *conf, const char *name)
launch_svc	zookld.c	/^static pid_t launch_svc(CONF *, const char *);$/;"	p	file:	signature:(CONF *, const char *)
log	check_zoobar.py	/^def log(*m):$/;"	f	access:public
log	zoobar/debug.py	/^def log(msg):$/;"	f	access:public
log_exit	check_zoobar.py	/^def log_exit(*m):$/;"	f	access:public
logged_in	zoobar/login.py	/^def logged_in():$/;"	f	access:public
login	z_client.py	/^def login(user, password):$/;"	f	access:public
login	zoobar/auth.py	/^def login(username, password):$/;"	f	access:public
login	zoobar/login.py	/^def login():$/;"	f	access:public
loginCookie	zoobar/login.py	/^    def loginCookie(self, username, token):$/;"	m	class:User	access:public
login_page	z_client.py	/^def login_page(op, user, password):$/;"	f	access:public
loginhelper	zoobar/login.py	/^    def loginhelper(*args, **kwargs):$/;"	f	function:requirelogin	access:public
logout	zoobar/login.py	/^    def logout(self):$/;"	m	class:User	access:public
logout	zoobar/login.py	/^def logout():$/;"	f	access:public
main	check_zoobar.py	/^def main():$/;"	f	access:public
main	run-shellcode.c	/^main(int ac, char **av)$/;"	f	signature:(int ac, char **av)
main	shellcode.S	/^ main:$/;"	l
main	submit.py	/^def main(filename):$/;"	f	access:public
main	zoobar/debug.py	/^def main():$/;"	f	access:public
main	zookd.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	zookfs.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	zookld.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
newtoken	zoobar/auth.py	/^def newtoken(db, person):$/;"	f	access:public
ngids	zookld.c	/^static int ngids = 0;$/;"	v	file:
nsvcs	zookd.c	/^static int nsvcs;$/;"	v	file:
nsvcs	zookld.c	/^static int nsvcs = 0; \/* actual number of services *\/$/;"	v	file:
parse	check-bugs.py	/^def parse(pn):$/;"	f	access:public
password	zoobar/zoodb.py	/^    password = Column(String(128))$/;"	v	class:Person
person_setup	zoobar/zoodb.py	/^def person_setup():$/;"	f	access:public
popladdr	shellcode.S	/^ popladdr:$/;"	l
post	z_client.py	/^def post(url, cookies, postdata):$/;"	f	access:public
print_wget_log	z_client.py	/^def print_wget_log():$/;"	f	access:public
process_client	zookd.c	/^static void process_client(int fd)$/;"	f	file:	signature:(int fd)
process_client	zookd.c	/^static void process_client(int);$/;"	p	file:	signature:(int)
profile	zoobar/zoodb.py	/^    profile = Column(String(5000), nullable=False, default="")$/;"	v	class:Person
recipient	zoobar/zoodb.py	/^    recipient = Column(String(128))$/;"	v	class:Transfer
recvfd	http.c	/^ssize_t recvfd(int socket, void *buffer, size_t length, int *fd)$/;"	f	signature:(int socket, void *buffer, size_t length, int *fd)
recvfd	http.h	/^ssize_t recvfd(int socket, void *buffer, size_t length, int *fd);$/;"	p	signature:(int socket, void *buffer, size_t length, int *fd)
red	check_zoobar.py	/^def red(s):$/;"	f	access:public
register	z_client.py	/^def register(user, password):$/;"	f	access:public
register	zoobar/auth.py	/^def register(username, password):$/;"	f	access:public
req	exploit-template.py	/^    req = build_exploit(shellcode)$/;"	v
requirelogin	zoobar/login.py	/^def requirelogin(page):$/;"	f	access:public
resp	exploit-template.py	/^    resp = send_req(sys.argv[1], int(sys.argv[2]), req)$/;"	v
run_wget	z_client.py	/^def run_wget(opts=[]):$/;"	f	access:public
say_fail	check-bugs.py	/^def say_fail(reason):$/;"	f	access:public
say_pass	check-bugs.py	/^def say_pass(reason):$/;"	f	access:public
send_req	exploit-template.py	/^def send_req(host, port, req):$/;"	f	access:public
sender	zoobar/zoodb.py	/^    sender = Column(String(128))$/;"	v	class:Transfer
sendfd	http.c	/^ssize_t sendfd(int socket, const void *buffer, size_t length, int fd)$/;"	f	signature:(int socket, const void *buffer, size_t length, int fd)
sendfd	http.h	/^ssize_t sendfd(int socket, const void *buffer, size_t length, int fd);$/;"	p	signature:(int socket, const void *buffer, size_t length, int fd)
service_parse_cb	zookld.c	/^static int service_parse_cb(const char *, int, void *);$/;"	p	file:	signature:(const char *, int, void *)
service_parse_cb	zookld.c	/^static int service_parse_cb(const char *name, int len, void *arg)$/;"	f	file:	signature:(const char *name, int len, void *arg)
setPerson	zoobar/login.py	/^    def setPerson(self, username, token):$/;"	m	class:User	access:public
setup	check_zoobar.py	/^def setup():$/;"	f	access:public
sh	check_zoobar.py	/^def sh(cmd, exit_onerr=True):$/;"	f	access:public
shellcode	exploit-template.py	/^    shellcode = shellfile.read()$/;"	v
shellfile	exploit-template.py	/^    shellfile = open("shellcode.bin", "r")$/;"	v
showZoobars	zoobar/templates/users.html	/^  function showZoobars(zoobars) {$/;"	f
split_path	http.c	/^void split_path(char *pn)$/;"	f	signature:(char *pn)
stack_buffer	exploit-template.py	/^stack_buffer = 0x34567890$/;"	v
stack_retaddr	exploit-template.py	/^stack_retaddr = stack_saved_ebp + 4$/;"	v
stack_saved_ebp	exploit-template.py	/^stack_saved_ebp = 0x12345678$/;"	v
start_server	zookld.c	/^static int start_server(const char *);$/;"	p	file:	signature:(const char *)
start_server	zookld.c	/^static int start_server(const char *portstr)$/;"	f	file:	signature:(const char *portstr)
stat_summary	check-bugs.py	/^def stat_summary(ans):$/;"	f	access:public
svcfds	zookd.c	/^static int svcfds[MAX_SERVICES];$/;"	v	file:
svcfds	zookld.c	/^static int svcfds[MAX_SERVICES];$/;"	v	file:
svcnames	zookld.c	/^static char svcnames[MAX_SERVICES][256];$/;"	v	file:
svcurls	zookd.c	/^static regex_t svcurls[MAX_SERVICES];$/;"	v	file:
thisdir	check_zoobar.py	/^thisdir = os.path.dirname(os.path.abspath(__file__))$/;"	v
time	zoobar/zoodb.py	/^    time = Column(String)$/;"	v	class:Transfer
token	zoobar/zoodb.py	/^    token = Column(String(128))$/;"	v	class:Person
touch	http.c	/^void touch(const char *name) {$/;"	f	signature:(const char *name)
transfer	z_client.py	/^def transfer(sender_cookies, recipient, zoobars):$/;"	f	access:public
transfer	zoobar/bank.py	/^def transfer(sender, recipient, zoobars):$/;"	f	access:public
transfer	zoobar/transfer.py	/^def transfer():$/;"	f	access:public
transfer_setup	zoobar/zoodb.py	/^def transfer_setup():$/;"	f	access:public
url_decode	http.c	/^void url_decode(char *dst, const char *src)$/;"	f	signature:(char *dst, const char *src)
url_decode	http.h	/^void url_decode(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
username	zoobar/zoodb.py	/^    username = Column(String(128), primary_key=True)$/;"	v	class:Person
users	zoobar/users.py	/^def users():$/;"	f	access:public
valid_cgi_script	http.c	/^valid_cgi_script(struct stat *st)$/;"	f	file:	signature:(struct stat *st)
verbose	check_zoobar.py	/^verbose = False$/;"	v
view_user	z_client.py	/^def view_user(cookies, username):$/;"	f	access:public
wget_log	z_client.py	/^wget_log = []$/;"	v
zoobarjs	zoobar/zoobarjs.py	/^def zoobarjs():$/;"	f	access:public
zoobars	zoobar/zoodb.py	/^    zoobars = Column(Integer, nullable=False, default=10)$/;"	v	class:Person
